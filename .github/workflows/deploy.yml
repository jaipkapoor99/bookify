name: 🚀 Production Deployment

on:
  push:
    branches: [main]
    tags: ["v*"]
  release:
    types: [published]

env:
  NODE_VERSION: "20"
  DEPLOYMENT_ENVIRONMENT: production

jobs:
  # Job 1: Pre-deployment Checks
  pre-deploy-checks:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run critical tests
        run: npm test -- --testPathPattern="critical|integration"

      - name: 🔍 Security scan
        run: npm audit --audit-level=high

      - name: 📊 Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Deployment check
        id: check
        run: |
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "✅ All pre-deployment checks passed!" >> $GITHUB_STEP_SUMMARY

  # Job 2: Build Production Assets
  build-production:
    name: 🏗️ Production Build
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks]
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_VERSION: ${{ needs.pre-deploy-checks.outputs.version }}

      - name: 🗜️ Compress assets
        run: |
          cd dist
          find . -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec gzip -k {} \;

      - name: 📦 Upload production build
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 30

      - name: 📊 Build analysis
        run: |
          echo "## 📊 Production Build Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY

          TOTAL_SIZE=$(du -sh dist/ | cut -f1)
          JS_FILES=$(find dist -name "*.js" | wc -l)
          CSS_FILES=$(find dist -name "*.css" | wc -l)

          echo "| Total Size | $TOTAL_SIZE |" >> $GITHUB_STEP_SUMMARY
          echo "| JS Files | $JS_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "| CSS Files | $CSS_FILES |" >> $GITHUB_STEP_SUMMARY

  # Job 3: Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-production]
    # environment:
    #   name: staging
    #   url: https://staging.bookify.com
    # Note: Uncomment above and configure 'staging' environment in repository settings
    # for deployment protection rules and environment-specific secrets
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/

      - name: 🚀 Deploy to Netlify Staging
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: "./dist"
          production-deploy: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Staging deployment v${{ needs.pre-deploy-checks.outputs.version }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

      - name: 🧪 Staging smoke tests
        run: |
          echo "🧪 Running staging smoke tests..."
          # Add actual smoke tests here
          sleep 10
          echo "✅ Staging smoke tests passed!" >> $GITHUB_STEP_SUMMARY

  # Job 4: Production Deployment
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-production, deploy-staging]
    # environment:
    #   name: production
    #   url: https://bookify.com
    # Note: Uncomment above and configure 'production' environment in repository settings
    # for deployment protection rules and environment-specific secrets
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/

      - name: 🚀 Deploy to Netlify Production
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: "./dist"
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Production deployment v${{ needs.pre-deploy-checks.outputs.version }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: 🔄 Invalidate CDN cache
        run: |
          echo "🔄 Invalidating CDN cache..."
          # Add CDN cache invalidation logic here
          echo "✅ CDN cache invalidated!" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Deployment metrics
        run: |
          echo "## 🌟 Production Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ needs.pre-deploy-checks.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Production |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Time | $(date -u) |" >> $GITHUB_STEP_SUMMARY

  # Job 5: Post-deployment Monitoring
  post-deploy-monitoring:
    name: 📊 Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    steps:
      - name: 🏥 Health check
        run: |
          echo "🏥 Running health checks..."
          # Add actual health check logic here
          sleep 5
          echo "✅ Health checks passed!" >> $GITHUB_STEP_SUMMARY

      - name: ⚡ Performance monitoring
        run: |
          echo "⚡ Monitoring performance..."
          # Add performance monitoring logic here
          echo "✅ Performance within acceptable limits!" >> $GITHUB_STEP_SUMMARY

      - name: 🔔 Notify team
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "Bookify v${{ needs.pre-deploy-checks.outputs.version }} is now live!" >> $GITHUB_STEP_SUMMARY
          echo "🌐 Production URL: https://bookify.com" >> $GITHUB_STEP_SUMMARY

  # Job 6: Rollback on Failure
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deploy-monitoring]
    if: failure()
    steps:
      - name: 🚨 Deployment failed
        run: |
          echo "## 🚨 Deployment Failed!" >> $GITHUB_STEP_SUMMARY
          echo "Initiating rollback procedures..." >> $GITHUB_STEP_SUMMARY

      - name: 🔄 Rollback deployment
        run: |
          echo "🔄 Rolling back to previous version..."
          # Add rollback logic here
          echo "✅ Rollback completed!" >> $GITHUB_STEP_SUMMARY

      - name: 📧 Notify on failure
        run: |
          echo "📧 Notifying team of deployment failure and rollback..." >> $GITHUB_STEP_SUMMARY
