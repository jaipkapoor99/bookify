name: 📦 Automated Release

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      pre-release:
        description: "Pre-release"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"

jobs:
  # Job 1: Prepare Release
  prepare-release:
    name: 🔧 Prepare Release
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run full test suite
        run: npm test

      - name: 🔍 Security audit
        run: npm audit --audit-level=moderate

      - name: 📊 Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Current version: $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY

      - name: 🔢 Bump version
        id: version
        run: |
          npm version ${{ github.event.inputs.release-type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "🚀 New version: $NEW_VERSION" >> $GITHUB_STEP_SUMMARY

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Create a simple changelog entry
          CHANGELOG_ENTRY="## [v${{ steps.version.outputs.new-version }}] - $(date +%Y-%m-%d)

          ### 🚀 What's New in This Release

          This release includes the latest improvements and bug fixes for Bookify.

          ### 🔧 Technical Improvements
          - Performance optimizations
          - Bug fixes and stability improvements
          - Updated dependencies

          ### 📊 Metrics
          - Bundle size optimizations
          - Improved lazy loading performance
          - Enhanced user experience

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current-version.outputs.current-version }}...v${{ steps.version.outputs.new-version }}"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📝 Update CHANGELOG.md
        run: |
          # Backup current changelog
          cp CHANGELOG.md CHANGELOG.md.bak

          # Create new changelog with latest entry at top
          echo "${{ steps.changelog.outputs.changelog }}" > CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          tail -n +3 CHANGELOG.md >> CHANGELOG_NEW.md
          mv CHANGELOG_NEW.md CHANGELOG.md

      - name: 💾 Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "🔖 Release v${{ steps.version.outputs.new-version }}"
          git push

  # Job 2: Build Release Assets
  build-release:
    name: 🏗️ Build Release Assets
    runs-on: ubuntu-latest
    needs: [prepare-release]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build production assets
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_VERSION: ${{ needs.prepare-release.outputs.new-version }}

      - name: 📦 Create release archive
        run: |
          cd dist
          tar -czf ../bookify-v${{ needs.prepare-release.outputs.new-version }}.tar.gz .
          cd ..
          zip -r bookify-v${{ needs.prepare-release.outputs.new-version }}.zip dist/

      - name: 📊 Generate build report
        run: |
          echo "## 📊 Build Report for v${{ needs.prepare-release.outputs.new-version }}" > BUILD_REPORT.md
          echo "" >> BUILD_REPORT.md
          echo "| Metric | Value |" >> BUILD_REPORT.md
          echo "|--------|-------|" >> BUILD_REPORT.md

          TOTAL_SIZE=$(du -sh dist/ | cut -f1)
          JS_FILES=$(find dist -name "*.js" | wc -l)
          CSS_FILES=$(find dist -name "*.css" | wc -l)
          ASSET_FILES=$(find dist -name "*.svg" -o -name "*.png" -o -name "*.jpg" | wc -l)

          echo "| Total Bundle Size | $TOTAL_SIZE |" >> BUILD_REPORT.md
          echo "| JavaScript Files | $JS_FILES |" >> BUILD_REPORT.md
          echo "| CSS Files | $CSS_FILES |" >> BUILD_REPORT.md
          echo "| Asset Files | $ASSET_FILES |" >> BUILD_REPORT.md
          echo "| Build Date | $(date -u) |" >> BUILD_REPORT.md

      - name: 📦 Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            bookify-v${{ needs.prepare-release.outputs.new-version }}.tar.gz
            bookify-v${{ needs.prepare-release.outputs.new-version }}.zip
            BUILD_REPORT.md
          retention-days: 90

  # Job 3: Create GitHub Release
  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 📥 Download release assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets

      - name: 🏷️ Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ needs.prepare-release.outputs.new-version }}" -m "Release v${{ needs.prepare-release.outputs.new-version }}"
          git push origin "v${{ needs.prepare-release.outputs.new-version }}"

      - name: 🎉 Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.new-version }}
          release_name: 🚀 Bookify v${{ needs.prepare-release.outputs.new-version }}
          body: |
            ${{ needs.prepare-release.outputs.changelog }}

            ## 📦 Downloads
            - [Source Code (tar.gz)](https://github.com/${{ github.repository }}/archive/v${{ needs.prepare-release.outputs.new-version }}.tar.gz)
            - [Source Code (zip)](https://github.com/${{ github.repository }}/archive/v${{ needs.prepare-release.outputs.new-version }}.zip)
            - [Production Build (tar.gz)](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare-release.outputs.new-version }}/bookify-v${{ needs.prepare-release.outputs.new-version }}.tar.gz)
            - [Production Build (zip)](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare-release.outputs.new-version }}/bookify-v${{ needs.prepare-release.outputs.new-version }}.zip)

            ## 🔧 Installation
            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd bookify
            git checkout v${{ needs.prepare-release.outputs.new-version }}

            # Install dependencies
            npm install

            # Start development server
            npm run dev
            ```

            ## 🚀 Deployment
            This release is automatically deployed to production at [bookify.com](https://bookify.com).

            ---
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current-version.outputs.current-version }}...v${{ needs.prepare-release.outputs.new-version }}
          draft: false
          prerelease: ${{ github.event.inputs.pre-release == 'true' }}

      - name: 📎 Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bookify-v${{ needs.prepare-release.outputs.new-version }}.tar.gz
          asset_name: bookify-v${{ needs.prepare-release.outputs.new-version }}.tar.gz
          asset_content_type: application/gzip

      - name: 📎 Upload release assets (zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bookify-v${{ needs.prepare-release.outputs.new-version }}.zip
          asset_name: bookify-v${{ needs.prepare-release.outputs.new-version }}.zip
          asset_content_type: application/zip

      - name: 📎 Upload build report
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./BUILD_REPORT.md
          asset_name: BUILD_REPORT.md
          asset_content_type: text/markdown

  # Job 4: Post-release Actions
  post-release:
    name: 📢 Post-release Actions
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    steps:
      - name: 🎉 Release summary
        run: |
          echo "## 🎉 Release v${{ needs.prepare-release.outputs.new-version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ needs.prepare-release.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ github.event.inputs.release-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ github.event.inputs.pre-release }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.new-version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Production Site](https://bookify.com)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 The release has been automatically deployed to production!"

      - name: 📧 Notify team
        run: |
          echo "📧 Release notifications sent to team members"
          # Add actual notification logic here (Slack, Discord, email, etc.)
