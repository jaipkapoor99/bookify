-- Create the complete base schema for the booking platform
-- Run this in Supabase SQL Editor

-- 1. Create custom types
CREATE TYPE "public"."Role" AS ENUM ('customer', 'admin');

-- 2. Create locations table
CREATE TABLE IF NOT EXISTS "public"."locations" (
    "location_id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "area" text NOT NULL,
    "city" text NOT NULL,
    "state" text NOT NULL,
    "pincode" text NOT NULL,
    "created_at" timestamp with time zone DEFAULT now(),
    "updated_at" timestamp with time zone DEFAULT now(),
    PRIMARY KEY ("location_id")
);

-- 3. Create venues table
CREATE TABLE IF NOT EXISTS "public"."venues" (
    "venue_id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "venue_name" text NOT NULL,
    "location_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now(),
    "updated_at" timestamp with time zone DEFAULT now(),
    PRIMARY KEY ("venue_id"),
    FOREIGN KEY ("location_id") REFERENCES "public"."locations"("location_id")
);

-- 4. Create events table
CREATE TABLE IF NOT EXISTS "public"."events" (
    "event_id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "name" text NOT NULL,
    "description" text,
    "start_time" timestamp with time zone NOT NULL,
    "end_time" timestamp with time zone NOT NULL,
    "image_url" text,
    "image_path" text,
    "created_at" timestamp with time zone DEFAULT now(),
    "updated_at" timestamp with time zone DEFAULT now(),
    PRIMARY KEY ("event_id")
);

-- 5. Create events_venues junction table
CREATE TABLE IF NOT EXISTS "public"."events_venues" (
    "event_venue_id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "event_id" bigint NOT NULL,
    "venue_id" bigint NOT NULL,
    "event_date" date NOT NULL,
    "no_of_tickets" integer NOT NULL DEFAULT 0,
    "price" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now(),
    "updated_at" timestamp with time zone DEFAULT now(),
    PRIMARY KEY ("event_venue_id"),
    FOREIGN KEY ("event_id") REFERENCES "public"."events"("event_id"),
    FOREIGN KEY ("venue_id") REFERENCES "public"."venues"("venue_id")
);

-- 6. Create users table
CREATE TABLE IF NOT EXISTS "public"."users" (
    "user_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "supabase_id" uuid UNIQUE,
    "name" text,
    "email" text,
    "address1" text,
    "address2" text,
    "address3" text,
    "location_id" bigint,
    "role" "public"."Role" DEFAULT 'customer',
    "created_at" timestamp with time zone DEFAULT now(),
    "updated_at" timestamp with time zone DEFAULT now(),
    PRIMARY KEY ("user_id"),
    FOREIGN KEY ("location_id") REFERENCES "public"."locations"("location_id")
);

-- 7. Create tickets table with correct column name
CREATE TABLE IF NOT EXISTS "public"."tickets" (
    "ticket_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "customer_id" integer NOT NULL,
    "event_venue_id" bigint NOT NULL,
    "ticket_price" bigint NOT NULL,
    "quantity" integer NOT NULL DEFAULT 1,
    "created_at" timestamp with time zone DEFAULT now(),
    "updated_at" timestamp with time zone DEFAULT now(),
    PRIMARY KEY ("ticket_id"),
    FOREIGN KEY ("customer_id") REFERENCES "public"."users"("user_id"),
    FOREIGN KEY ("event_venue_id") REFERENCES "public"."events_venues"("event_venue_id")
);

-- 8. Enable Row Level Security
ALTER TABLE "public"."events" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."venues" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."locations" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."events_venues" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."tickets" ENABLE ROW LEVEL SECURITY;

-- 9. Create public read policies
CREATE POLICY "Allow public read access to events" ON "public"."events" FOR SELECT USING (true);
CREATE POLICY "Allow public read access to venues" ON "public"."venues" FOR SELECT USING (true);
CREATE POLICY "Allow public read access to locations" ON "public"."locations" FOR SELECT USING (true);
CREATE POLICY "Allow public read access to events_venues" ON "public"."events_venues" FOR SELECT USING (true);

-- 10. Create user profile creation trigger
CREATE OR REPLACE FUNCTION "public"."create_user_profile"()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  INSERT INTO public.users (supabase_id, name, email)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'full_name',
    NEW.email
  );
  RETURN NEW;
END;
$$;

-- Create the trigger
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.create_user_profile();

-- 11. Create the fixed book_ticket function
CREATE OR REPLACE FUNCTION public.book_ticket(
  p_event_venue_id bigint,
  p_quantity int DEFAULT 1
) RETURNS void
LANGUAGE plpgsql SECURITY DEFINER
AS $$
DECLARE
  v_auth_uuid UUID;
  v_internal_user_id INT;
  v_venue_details RECORD;
BEGIN
  -- Validate quantity
  IF p_quantity < 1 THEN
    RAISE EXCEPTION 'Quantity must be at least 1';
  END IF;

  -- Get the current user's auth UUID from the session
  SELECT auth.uid() INTO v_auth_uuid;
  IF v_auth_uuid IS NULL THEN
    RAISE EXCEPTION 'User is not authenticated.';
  END IF;

  -- Get the internal user_id
  SELECT user_id INTO v_internal_user_id
  FROM public.users
  WHERE supabase_id = v_auth_uuid
  LIMIT 1;

  -- Verify a user profile was found
  IF v_internal_user_id IS NULL THEN
    RAISE EXCEPTION 'User profile not found. Please complete your profile before booking.';
  END IF;

  -- Check for ticket availability and lock the row
  SELECT * INTO v_venue_details
  FROM public.events_venues
  WHERE event_venue_id = p_event_venue_id FOR UPDATE;

  IF v_venue_details.event_venue_id IS NULL THEN
      RAISE EXCEPTION 'Event venue not found.';
  END IF;

  IF v_venue_details.no_of_tickets < p_quantity THEN
    RAISE EXCEPTION 'Not enough tickets available. Only % tickets remaining.', v_venue_details.no_of_tickets;
  END IF;

  -- Decrement the ticket count
  UPDATE public.events_venues
  SET no_of_tickets = no_of_tickets - p_quantity
  WHERE event_venue_id = p_event_venue_id;

  -- Create the ticket record
  INSERT INTO public.tickets(customer_id, event_venue_id, ticket_price, quantity)
  VALUES (v_internal_user_id, p_event_venue_id, v_venue_details.price, p_quantity);

END;
$$;

-- 12. Create get_my_bookings function
CREATE OR REPLACE FUNCTION "public"."get_my_bookings"()
RETURNS SETOF "public"."tickets"
LANGUAGE sql SECURITY DEFINER
AS $$
  SELECT *
  FROM public.tickets
  WHERE customer_id IN (
    SELECT user_id FROM public.users WHERE supabase_id = auth.uid()
  );
$$; 