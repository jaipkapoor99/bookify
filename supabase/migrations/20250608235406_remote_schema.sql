

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."Role" AS ENUM (
    'customer',
    'admin'
);


ALTER TYPE "public"."Role" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."book_ticket"("p_event_venue_id" bigint) RETURNS "void"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE
  v_auth_uuid UUID;
  v_internal_user_id INT;
  v_venue_details RECORD;
BEGIN
  -- Get the current user's auth UUID from the session
  SELECT auth.uid() INTO v_auth_uuid;

  -- Corrected Logic: Get the internal user_id, but add LIMIT 1
  -- to ensure the query never fails or assigns the wrong ID
  -- in the case of duplicate user profiles.
  SELECT user_id INTO v_internal_user_id
  FROM public.users
  WHERE supabase_id = v_auth_uuid
  LIMIT 1;

  -- Verify a user profile was found
  IF v_internal_user_id IS NULL THEN
    RAISE EXCEPTION 'User profile not found in public.users.';
  END IF;

  -- Check for ticket availability and lock the row
  SELECT * INTO v_venue_details
  FROM public.events_venues
  WHERE event_venue_id = p_event_venue_id FOR UPDATE;

  IF v_venue_details.event_venue_id IS NULL THEN
      RAISE EXCEPTION 'Event venue not found.';
  END IF;

  IF v_venue_details.no_of_tickets <= 0 THEN
    RAISE EXCEPTION 'No tickets available for this event.';
  END IF;

  -- Decrement the ticket count
  UPDATE public.events_venues
  SET no_of_tickets = no_of_tickets - 1
  WHERE event_venue_id = p_event_venue_id;

  -- Create the ticket with the correct, consistently-retrieved user ID.
  INSERT INTO public.tickets(customer_id, events_venues_id, ticket_price)
  VALUES (v_internal_user_id, p_event_venue_id, v_venue_details.price);

END;
$$;


ALTER FUNCTION "public"."book_ticket"("p_event_venue_id" bigint) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."create_user_profile"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
BEGIN
  -- Insert the new user's auth ID and email into the public users table.
  INSERT INTO public.users (supabase_id, email)
  VALUES (NEW.id, NEW.email);
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."create_user_profile"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."tickets" (
    "ticket_id" integer NOT NULL,
    "customer_id" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "ticket_price" bigint NOT NULL,
    "events_venues_id" bigint
);


ALTER TABLE "public"."tickets" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_my_bookings"() RETURNS SETOF "public"."tickets"
    LANGUAGE "sql" SECURITY DEFINER
    AS $$
  SELECT *
  FROM public.tickets
  WHERE customer_id = (
    SELECT user_id
    FROM public.users
    WHERE supabase_id = auth.uid()
  );
$$;


ALTER FUNCTION "public"."get_my_bookings"() OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."users" (
    "user_id" integer NOT NULL,
    "address1" "text",
    "address2" "text",
    "location_id" bigint,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "supabase_id" "uuid",
    "role" "public"."Role" DEFAULT 'customer'::"public"."Role",
    "address3" "text",
    "name" "text",
    "email" "text"
);


ALTER TABLE "public"."users" OWNER TO "postgres";


ALTER TABLE "public"."users" ALTER COLUMN "user_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."customers_customer_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."events" (
    "event_id" integer NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "start_time" timestamp with time zone,
    "end_time" timestamp with time zone,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "image_url" "text"
);


ALTER TABLE "public"."events" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."events_event_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."events_event_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."events_event_id_seq" OWNED BY "public"."events"."event_id";



CREATE TABLE IF NOT EXISTS "public"."events_venues" (
    "event_venue_id" bigint NOT NULL,
    "event_id" bigint NOT NULL,
    "venue_id" bigint NOT NULL,
    "no_of_tickets" integer,
    "event_venue_date" "date",
    "price" bigint DEFAULT '0'::bigint NOT NULL
);


ALTER TABLE "public"."events_venues" OWNER TO "postgres";


ALTER TABLE "public"."events_venues" ALTER COLUMN "event_venue_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."events_venues_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."locations" (
    "location_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "city" "text" NOT NULL,
    "state" "text" NOT NULL,
    "pincode" "text" NOT NULL,
    "area" "text" NOT NULL
);


ALTER TABLE "public"."locations" OWNER TO "postgres";


ALTER TABLE "public"."locations" ALTER COLUMN "location_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."locations_location_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."tickets" ALTER COLUMN "ticket_id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."tickets_ticket_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."venues" (
    "venue_id" integer NOT NULL,
    "venue_name" character varying(255) NOT NULL,
    "venue_address" "text",
    "location_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."venues" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."venues_venue_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."venues_venue_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."venues_venue_id_seq" OWNED BY "public"."venues"."venue_id";



ALTER TABLE ONLY "public"."events" ALTER COLUMN "event_id" SET DEFAULT "nextval"('"public"."events_event_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."venues" ALTER COLUMN "venue_id" SET DEFAULT "nextval"('"public"."venues_venue_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "customers_customer_id_key" UNIQUE ("user_id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "customers_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "events_pkey" PRIMARY KEY ("event_id");



ALTER TABLE ONLY "public"."events_venues"
    ADD CONSTRAINT "events_venues_pkey" PRIMARY KEY ("event_venue_id");



ALTER TABLE ONLY "public"."locations"
    ADD CONSTRAINT "locations_area_key" UNIQUE ("area");



ALTER TABLE ONLY "public"."locations"
    ADD CONSTRAINT "locations_location_id_key" UNIQUE ("location_id");



ALTER TABLE ONLY "public"."locations"
    ADD CONSTRAINT "locations_pincode_key" UNIQUE ("pincode");



ALTER TABLE ONLY "public"."locations"
    ADD CONSTRAINT "locations_pkey" PRIMARY KEY ("location_id");



ALTER TABLE ONLY "public"."tickets"
    ADD CONSTRAINT "tickets_pkey" PRIMARY KEY ("ticket_id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_supabase_id_key" UNIQUE ("supabase_id");



ALTER TABLE ONLY "public"."venues"
    ADD CONSTRAINT "venues_pkey" PRIMARY KEY ("venue_id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "customers_supabase_id_fkey" FOREIGN KEY ("supabase_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."events_venues"
    ADD CONSTRAINT "fk_event" FOREIGN KEY ("event_id") REFERENCES "public"."events"("event_id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."tickets"
    ADD CONSTRAINT "fk_events_venues" FOREIGN KEY ("events_venues_id") REFERENCES "public"."events_venues"("event_venue_id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."events_venues"
    ADD CONSTRAINT "fk_venue" FOREIGN KEY ("venue_id") REFERENCES "public"."venues"("venue_id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."tickets"
    ADD CONSTRAINT "tickets_customer_id_fkey" FOREIGN KEY ("customer_id") REFERENCES "public"."users"("user_id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("location_id") ON UPDATE CASCADE;



ALTER TABLE ONLY "public"."venues"
    ADD CONSTRAINT "venues_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("location_id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Allow authenticated users to insert their own tickets" ON "public"."tickets" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "users"."supabase_id"
   FROM "public"."users"
  WHERE ("users"."user_id" = "tickets"."customer_id"))));



CREATE POLICY "Allow public read access" ON "public"."events" FOR SELECT USING (true);



CREATE POLICY "Allow public read access" ON "public"."events_venues" FOR SELECT USING (true);



CREATE POLICY "Allow public read access" ON "public"."locations" FOR SELECT USING (true);



CREATE POLICY "Allow public read access" ON "public"."venues" FOR SELECT USING (true);



CREATE POLICY "Allow public read access to all venues" ON "public"."venues" FOR SELECT USING (true);



CREATE POLICY "Allow public read access to events_venues" ON "public"."events_venues" FOR SELECT USING (true);



CREATE POLICY "Users can view their own tickets" ON "public"."tickets" FOR SELECT USING (("customer_id" IN ( SELECT "users"."user_id"
   FROM "public"."users"
  WHERE ("users"."supabase_id" = "auth"."uid"()))));



ALTER TABLE "public"."events" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."events_venues" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."locations" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."tickets" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."venues" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON FUNCTION "public"."book_ticket"("p_event_venue_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."book_ticket"("p_event_venue_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."book_ticket"("p_event_venue_id" bigint) TO "service_role";



GRANT ALL ON FUNCTION "public"."create_user_profile"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_user_profile"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_user_profile"() TO "service_role";



GRANT ALL ON TABLE "public"."tickets" TO "anon";
GRANT ALL ON TABLE "public"."tickets" TO "authenticated";
GRANT ALL ON TABLE "public"."tickets" TO "service_role";



GRANT ALL ON FUNCTION "public"."get_my_bookings"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_my_bookings"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_my_bookings"() TO "service_role";



























GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";



GRANT ALL ON SEQUENCE "public"."customers_customer_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."customers_customer_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."customers_customer_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."events" TO "anon";
GRANT ALL ON TABLE "public"."events" TO "authenticated";
GRANT ALL ON TABLE "public"."events" TO "service_role";



GRANT ALL ON SEQUENCE "public"."events_event_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."events_event_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."events_event_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."events_venues" TO "anon";
GRANT ALL ON TABLE "public"."events_venues" TO "authenticated";
GRANT ALL ON TABLE "public"."events_venues" TO "service_role";



GRANT ALL ON SEQUENCE "public"."events_venues_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."events_venues_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."events_venues_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."locations" TO "anon";
GRANT ALL ON TABLE "public"."locations" TO "authenticated";
GRANT ALL ON TABLE "public"."locations" TO "service_role";



GRANT ALL ON SEQUENCE "public"."locations_location_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."locations_location_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."locations_location_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."tickets_ticket_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tickets_ticket_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tickets_ticket_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."venues" TO "anon";
GRANT ALL ON TABLE "public"."venues" TO "authenticated";
GRANT ALL ON TABLE "public"."venues" TO "service_role";



GRANT ALL ON SEQUENCE "public"."venues_venue_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."venues_venue_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."venues_venue_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
